(assert (sort '(2 9 1 5 1 4 9 7 2 1 4))
        '(1 1 1 2 2 4 4 5 7 9 9) equal?)
(assert (group '(1 1 1 2 2 4 4 5 7 9 9))
        '((1 1 1) (2 2) (4 4) (5) (7) (9 9))
        equal?)
(assert (transpose '((1 1 1) (2 2) (4 4) (5) (7) (9 9)))
        '((1 2 4 5 7 9) (1 2 4 9) (1))
        equal?)
(assert (concate '((1 2 4 5 7 9) (1 2 4 9) (1)))
        '(1 2 4 5 7 9 1 2 4 9 1)
        equal?)

;; concat . transpose . group . sort

(define (concate lst)
  (foldr append '() lst))

(define (transpose lst)
  (define (foldr-flexible list-f lst)
    (foldr (lambda (x acc)
             (if (null? x)
                 acc
                 (cons (list-f x) acc)))
           '() lst))
  (let aux ((lst lst))
    (if (null? (car lst))
        '()
        (cons (foldr-flexible car lst)
              (aux (foldr-flexible cdr lst))))))

(define (group set)
  (define (join-set x set)
    (cond ((null? set) (list (list x)))
          ((< (caar set) x)
           (cons (car set)
                 (join-set x (cdr set))))
          ((= (caar set) x)
           (cons (cons x (car set)) (cdr set)))
          (else (cons (list x) set))))
  (foldr join-set '() set))

(define (sort lst)
  (if (null? lst)
      lst
      (foldr adjoin-set `(,(car lst)) (cdr lst))))

(define (adjoin-set x set)
  (define (iter set acc)
    (cond ((null? set) (reverse (cons x acc)))
          ((= x (car set))
           (append (reverse acc) set))
          ((< x (car set))
           (append (reverse acc) (cons x set)))
          (else (iter (cdr set) (cons (car set) acc)))))
  (iter set '()))