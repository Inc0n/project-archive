
(define (new-set lst)
  (if (null? lst)
      lst
      (foldr adjoin-set `(,(car lst)) (cdr lst))))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (let iter ((set set) (acc '()))
    (cond ((null? set) (reverse (cons x acc)))
          ((= x (car set))
           (append (reverse acc) set))
          ((< x (car set))
           (append (reverse acc) (cons x set)))
          (else (iter (cdr set) (cons (car set) acc))))))

(define (adjoin-set x set sort-proc)
  (let iter ((set set) (acc '()))
    (cond ((null? set) (reverse (cons x acc)))
          ((sort-proc x (car set))
           (append (reverse acc) (cons x set)))
          (else (iter (cdr set) (cons (car set) acc))))))

(define (set-intersect set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1))
            (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set (cdr set1)
                                          (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((< x2 x1)
               (intersection-set set1 (cdr set2)))))))