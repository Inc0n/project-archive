
;; Exercise 3.15 mutability

(define z1 (let ((x '(a b)))
             (cons x x)))
(define z2 (cons (list 'a 'b) (list 'a 'b)))
(define (set-to-wow! x)
  (set-car! (car x) 'wow)
  x)

(set-to-wow! z2)
'((wow b) a b)

;; Z1
;; x:
;;    'a          'b
;;    ^           ^
;;    |           |
;;  +-|-----+   +-|-----+
;;  | * | *---->| * | \ |
;;  +-------+   +-------+
;;   ^^
;;   | \
;;   |  \---------.
;;   \.           |
;;  +-|-+---+   +-|-+---+
;;  | * | *---->| * | \ |
;;  +---+---+   +---+---+
;; z is the diagram above


(set-to-wow! z1)
;; x:
;;    'wow          'b
;;    ^           ^
;;    |           |
;;  +-|-----+   +-|-----+
;;  | * | *---->| * | \ |
;;  +-------+   +-------+
;;   ^^
;;   | \
;;   |  \---------.
;;   \.           |
;;  +-|-+---+   +-|-+---+
;;  | * | *---->| * | \ |
;;  +---+---+   +---+---+
'((wow b) wow b)




(define (my-infinite? x))