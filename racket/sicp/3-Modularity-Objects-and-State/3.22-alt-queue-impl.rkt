(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (front-queue)
      (if (empty-queue? front-ptr)
          (error "FRONT called with an empty queue" front-ptr)
          (mcar front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (mcons item '())))
        (cond ((empty-queue? front-ptr)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair))
               queue)
              (else
               (set-mcdr! rear-ptr new-pair)
               (set-rear-ptr! new-pair)))))
    (define (delete-queue!)
      (cond ((empty-queue? front-ptr)
             (error "DELETE! called with an empty queue" front-ptr))
            (else
             (set-front-ptr! (cdr front-ptr)))))
    (define (dispatch m)
      (case m
        ('front-ptr front-ptr)
        ('rear-ptr  rear-ptr)
        ('empty-queue? empty-queue)
        ('front-queue front-queue)
        ('insert-queue! insert-queue!)
        ('delete-queue! delete-queue!)))
    dispatch))