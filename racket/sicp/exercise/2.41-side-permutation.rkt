
(define (unique-triplets n)
  (flatmap (lambda (i)
             (flatmap (lambda (j)
                        (map (lambda (k) (list i j k))
                             (enumerate-interval 1 (- j 1))))
                      (enumerate-interval 1 (- i 1))))
                   (enumerate-interval 1 n)))
(define (unique-triplets n)
  (flatmap (lambda (i)
             (flatmap (lambda (j)
                        (flatmap (lambda (k)
                                   (map (lambda (z) (list i j k z))
                                        (enumerate-interval 1 (- k 1))))
                                 (enumerate-interval 1 (- j 1))))
                      (enumerate-interval 1 (- i 1))))
                   (enumerate-interval 1 n)))

(define (permutations n size)
  ;; n: the length of result tuple
  ;; size: the biggest number in tuple
  (define (from-downto x y)
    (reverse (enumerate-interval y x)))

  (define (iter n size acc)
    (if (< n 2)
        (map (lambda (j) (cons j acc))
             (enumerate-interval 1 size))
        ;; (flatmap (lambda (i)
        ;;            (let ((acc (cons i acc)))
        ;;              (map (lambda (j) (cons j acc))
        ;;                   (enumerate-interval 1 (- i 1)))))
        ;;          (enumerate-interval 1 size))
        (flatmap (lambda (i)
                   (iter (- n 1)
                         (- i 1)
                         (cons i acc)))
                 (enumerate-interval 1 size))))
  (iter n size '()))