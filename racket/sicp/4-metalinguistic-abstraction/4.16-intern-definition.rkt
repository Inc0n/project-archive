
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars)) (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (let ((val (env-loop env)))
    (if (eq? val '*unassigned*)
        (error "Use of *unassigned* variable" var)
        val)))

(define (scan-out-defines body)
  (define (aux intern-defines body expr-acc)
    (if (null? body)
      (append (reverse intern-defines)
              (reverse expr-acc))
      (let ((expr (first body)))
        (if (define? expr)
            (scan-out-defines (cons expr intern-defines)
                              (rest body)
                              expr-acc)
            (scan-out-defines intern-defines
                              (rest body)
                              (cons expr expr-acc))))))
  (aux '() body '()))