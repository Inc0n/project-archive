
(define (make-table)
  (define (assoc key records)
    (cond ((null? records)
           false)
          ((equal? key (car (car records)))
           (car records))
          (else (assoc key (cdr records)))))
  (let ((local-table (cons '*table* '())))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                             (cons (cons key-2 value)
                                    (cdr subtable)))))
            (set-cdr! local-table
                       (cons (cons key-1 (cons
                                            (cons key-2 value) '()))
                              (cdr local-table)))))
      'ok)
    (define (print)
      (printf "~a~%" local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            ((eq? m 'print) print)
            (else (error "Unknown operation: TABLE" m))))
    dispatch))

;; (define (test)
;;   (define x (make-table))
;;   (display ((x 'insert!) '(a) 1))
;;   (display #\newline)
;;   ((x 'print))
;;   (display ((x 'insert!) '(b) 2))
;;   (display #\newline)
;;   ((x 'print))
;;   ((x 'insert!) '(c) 3)
;;   ((x 'print)))
