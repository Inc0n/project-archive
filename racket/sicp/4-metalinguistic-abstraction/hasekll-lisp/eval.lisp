
(load "env.lisp")
(load "data.lisp")
(load "repl.lisp")

(defun start-my-scheme-lisp ()
  (labels
      ((eval-if (exp env)
         (if (true? (evalu (if-predicate exp) env))
             (evalu (if-consequent exp) env)
             (evalu (if-alternative exp) env)))
       (eval-sequence (exps env)
         (cond ((last-exp? exps)
                (evalu (first-exp exps) env))
               (t
                (evalu (first-exp exps) env)
                (eval-sequence (rest-exps exps) env))))
       (eval-assignment (exp env)
         (set-variable-value! (assignment-variable exp)
                              (evalu (assignment-value exp) env)
                              env)
         'ok)
       (eval-definition (exp env)
         (define-variable! (definition-variable exp)
             (evalu (definition-value exp) env)
           env)
         'ok)
       (list-of-values (exps env)
         (if (no-operands? exps)
             '()
             (cons (evalu (first-operand exps) env)
                   (list-of-values (rest-operands exps) env))))
       (my-apply (procedure arguments)
         (cond ((primitive-procedure? procedure)
                (apply-primitive-procedure procedure arguments))
               ((compound-procedure? procedure)
                (eval-sequence
                 (procedure-body procedure)
                 (extend-environment
                  (procedure-parameters procedure)
                  arguments
                  (procedure-environment procedure))))
               (t
                (error nil "Unknown procedure type: APPLY"
                       procedure))))
       (evalu (exp env)
         (cond ((self-evaluating? exp) exp)
               ((variable? exp) (lookup-variable-value exp env))
               ((get 'special (car exp))
                (funcall (get 'special (car exp))
                         exp env))
               ((application? exp)
                (my-apply (evalu (operator exp) env)
                       (list-of-values (operands exp) env)))
               (t
                (error nil "Unknown expression type -- EVAL"
                       exp)))))
    ;; (put 'special 'self-evaluating (lambda (exp env) exp))
    ;; (put 'special 'variable lookup-variable-value)
    (setf (get 'special 'quote)
          (lambda (exp env)
            (declare (ignore env))
            (text-of-quotation exp)))
    (setf (get 'special 'set!) #'eval-assignment)
    (setf (get 'special 'define) #'eval-definition)
    (setf (get 'special 'if) #'eval-if)
    (setf (get 'special 'lambda)
          (lambda (exp env)
            (make-procedure (lambda-parameters exp)
                            (lambda-body exp)
                            env)))
    (setf (get 'special 'begin)
          (lambda (exp env)
            (eval-sequence (begin-actions exp) env)))
    (setf (get 'special 'cond)
          (lambda (exp env)
            (evalu (cond->if exp) env)))

    (driver-loop #'evalu)))