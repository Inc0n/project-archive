
(define (deriv expr var)
  (cond ((number? expr) 0)
        ((variable? expr)
         (if (same-variable? expr var) 1 0))
        ((pair? expr)
         (cond
          ((sum? expr)
           (make-sum (deriv (addend expr) var)
                     (deriv (augend expr) var)))
          ((product? expr)
           (make-sum (make-product (multiplier expr)
                                   (deriv (multiplicand expr) var))
                     (make-product (deriv (multiplier expr) var)
                                   (multiplicand expr))))
          ((exponential? expr)
           (make-product (make-product
                          (make-exponential (base expr)
                                            (- (exponent expr) 1))
                          (exponent expr))
                         (deriv (base expr) var)))))
        (else (error "unknown expression type: DERIV" expr))))

(define (make-stream string)
  (let ((index 0)
        (length (string-length string))
        (stack '()))
    (define (read-char)
      (let ((char (string-ref string index)))
        (if (= index length)
            #f
            (set! index (+ index 1)))
        char))
    (define (push-char c)
      (if (char? c)
          (set! stack (cons c stack))
          (error "argument c must be of type character: PUSH-CHAR" c)))
    (define (get-stack)
      (if (null? stack)
          #f
          (list->string (reverse stack))))
    (define (dispatch m)
      (case m
        ('read-char read-char)
        ('push-char push-char)
        ('stack (get-stack))
        (else (error "unknown message: STREAM" m))))
    dispatch))

(define (sum? c) (char=? c #\+))
(define (product? c) (char=? c #\*))

(define (translate string)
  (define (compile stream)
    (let ((c ((stream 'read-char))))
      (cond ((sum? c)
             (if (stream 'stack)
                 #t
                 (error "")))
            ((product? c)
             (if (stream 'stack)
                 #t
                 (error "")))
            (else ((stream 'push-char) c)))))
  (compile (make-stream string)))