// to compile, gcc assembler.c -o assembler
// No error check is provided.
// Variable names cannot start with 0-9.
// hexadecimals are twos complement.
// first address of the code section is zero, data section follows the code section.
//fout tables are formed: jump table, ldi table, label table and variable table.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


//Converts a hexadecimal string to integer.
int hex2int(char* hex) {
    int result = 0;

    while ((*hex) != '\0')
    {
        if (isdigit(*hex))
			result = result*16 + (*hex) - '0';
        else if (isalpha(*hex)) {
			int offset = islower(*hex) ? 'a' : 'A' + 10;
			result = result*16 + (*hex) - offset + 10;
		}
		/* TODO: maybe raise and error here for invalid character */
        hex++;
    }
    return result;
}

struct pair
{
	int location;
	char *name;
};

struct pairs
{
	pair* _pairs;
	int n, size;
};

void readUntil(FILE *fp. const char *text) {
	char line[100];
	while (fgets(line, sizeof line, fp))  //skip till .data, if no .data, also ok.
	{
		token=strtok(line, "\n\t\r ");
		if (strcmp(token, text) == 0)
			break;
	}
}

int assembleTwoOperands() {
	char* op1 = strtok(NULL, "\n\t\r ");
	char* op2 = strtok(NULL, "\n\t\r ");
	return (op1[0]-'0') | ((op2[0]-'0')<<3);
}

pair assembleJMP(int addr) {
	char* label = strtok(NULL,"\n\t\r ");           //read the label
	return {.location=counter, label=strdup(label)};
}

int assemble3operands() {
	char* op1 = strtok(NULL,"\n\t\r ");
	char* op2 = strtok(NULL,"\n\t\r ");
	char* op3 = strtok(NULL,"\n\t\r ");
	return (op1[0]-'0') | ((op2[0]-'0')<<3) | ((op3[0]-'0')<<6);
}

int assembleInc() {
	char* op1 = strtok(NULL,"\n\t\r ");
	return (op1[0]-'0') | ((op1[0]-'0')<<3);
}

//

pairs* makePairs(int size) {
	pairs* p = malloc(sizeof(pairs));
	p->_pairs = malloc(sizeof(pair) * size);
	p->size = size;
	return p;
}

void freePairs(pairs* ps) {
	free(ps->_pairs);
	free(ps);
}

pair* pairAt(pairs* p, int i) {
	return &(p->_pairs[i]);
}

void insertPair(pairs* ps, pair p) {
	if (ps->n >= ps->size)
		printf("attempting to insert pair into filled pairs\n");
	else {
		ps->_pairs[ps->n] = p;
		ps->n++;
	}
}

int findPair(pairs* ps, const char* name) {
	findByName(ps->_pairs, ps->n, name);
}

int findByName(pair* pairs, int size, const char* name) {
	int i = 0;
	while ((i < size) && (strcmp(pairs[i].name, name) != 0))
		i++;
	return i;
}

//

void main()
{
    FILE *fp;
	char line[100];
	char *token = NULL;
    char *op1, *label;
    int  chch;

    int program[1000];
    int counter=0;  //holds the address of the machine code instruction

// A label is a symbol which mark a location in a program. In the example
// program above, the string "lpp", "loop" and "lp1" are labels.
    struct pair labels[50]; //there can be 50 labels at most in our programs
    int nooflabels = 0; //number of labels encountered during assembly.

// Jump instructions cannot be assembled readily because we may not know the value of
// the label when we encountered a jump instruction. This happens if the label used by
// that jump instruction appear below that jump instruction. This is the situation
// with the label "loop" in the example program above. Hence, the location of jump
// instructions must be stored.
    struct pair jumptable[100]; //There can be at most 100 jumps
    int noofjumps=0;  //number of jumps encountered during assembly.

// The list of variables in .data section and their locations.
    struct pair variables[50]; //There can be 50 varables at most.
    int noofvariables = 0;

//Variables and labels are used by ldi instructions.
//The memory for the variables are traditionally allocated at the end of the code section.
//Hence their addresses are not known when we assemble a ldi instruction. Also, the value of
//a label may not be known when we encounter a ldi instruction which uses that label.
//Hence, the location of the ldi instructions must be kept, and these instructions must be
//modified when we discover the address of the label or variable that it uses.
    struct pair lditable[100];
    int noofldis=0;


    fp = fopen("name_of_program","r");

    if (fp == NULL) {
		printf("file not found!")
		return -1;
	}

	readUntil(".code"); //skip till .code section

	while(fgets(line,sizeof line,fp)!= NULL)
	{
		token=strtok(line,"\n\t\r ");  //get the instruction mnemonic or label

//========================================   FIRST PASS  ======================================================
		while (token)
		{
			if (strcmp(token,"ldi")==0)        //---------------LDI INSTRUCTION--------------------
			{
				op1 = strtok(NULL,"\n\t\r ");            //get the 1st operand of ldi, which is the register that ldi loads
				program[counter] = 0x1000 + hex2int(op1);    //generate the first 16-bit of the ldi instruction
				counter++;                               //move to the second 16-bit of the ldi instruction
				op1 = strtok(NULL,"\n\t\r ");            //get the 2nd operand of ldi, which is the data that is to be loaded
				if (strncmp(op1, "0x", 2) == 0)        //if the 2nd operand is twos complement hexadecimal
					program[counter]=hex2int(op1+2)&0xffff;  //convert it to integer and form the second 16-bit
				else if (op1[0] == '-' || isdigit(op1))       //if the 2nd operand is decimal
					program[counter]=atoi(op1)&0xffff;       //convert it to integer and form the second 16-bit
				else                                     //if the second operand is not decimal or hexadecimal, it is a laber or a variable.
				{                                        //in this case, the 2nd 16-bits of the ldi instruction cannot be generated.
					lditable[noofldis].location = counter; //record the location of this 2nd 16-bit
					lditable[noofldis].name =  strdup(op1); //in the lditable array.
					noofldis++;
				}
				counter++;                               //skip to the next memory location
			}
			//------------LD INSTRUCTION---------------------
			else if (strcmp(token,"ld")==0)
			{
				chch = assembleTwoOperands();
				//form the instruction and write it to memory
				program[counter] = 0x2000+(chch & 0x00ff);
				//skip to the next empty location in memory
				counter++;
			}
			//-------------ST INSTRUCTION--------------------
			else if (strcmp(token,"st")==0)
			{
				//to be added
			}
			//------------- CONDITIONAL JUMP ------------------
			else if (strcmp(token,"jz")==0)
			{
				//to be added
			}
			//-------------- JUMP -----------------------------
			else if (strcmp(token,"jmp")==0)
			{
				pair jmp = assembleJMP(counter);
				jumptable[noofjumps] = jmp;
				noofjumps++;
				//write the incomplete instruction (just opcode) to memory
				program[counter] = 0x5000;
				counter++;
			}
			//----------------- ADD -------------------------------
			else if (strcmp(token,"add")==0)
			{
				chch = assemble3operands();
				program[counter]=0x7000+((chch)&0x00ff);
				counter++;
			}
			else if (strcmp(token,"sub")==0)
			{
				chch = assemble3operands();
				/* TODO: rename sub opcode */
				program[counter]=0x7000+((chch)&0x00ff);
				counter++;
				//to be added
			}
			else if (strcmp(token,"and")==0)
			{
				//to be added
			}
			else if (strcmp(token,"or")==0)
			{
				//to be added
			}
			else if (strcmp(token,"xor")==0)
			{
				//to be added
			}
			else if (strcmp(token,"not")==0)
			{
				chch = assembleTwoOperands();
				program[counter]=0x7500+(chch & 0x00ff);
				counter++;
			}
			else if (strcmp(token,"mov")==0)
			{
				//to be added
			}
			else if (strcmp(token,"inc")==0)
			{
				chch = assembleInc();
				program[counter]=0x7700+((chch)&0x00ff);
				counter++;
			}
			else if (strcmp(token,"dec")==0)
			{
				//to be added
			}
			else //------WHAT IS ENCOUNTERED IS NOT AN INSTRUCTION BUT A LABEL. UPDATE THE LABEL TABLE--------
			{
				//buraya bir counter koy. error check
				op1 = strdup(token);
				labels[nooflabels] = {.location=counter, .name=op1};
				nooflabels++;
			}
			token = strtok(NULL,",\n\t\r ");
		}
	}


//================================= SECOND PASS ==============================

	//supply the address fields of the jump and jz instructions from the
	int i, j;
	for (i = 0; i < noofjumps; i++)     //for all jump/jz instructions
	{
		j = findByName(labels, nooflabels, jumptable[i].name);
		int relativeaddr = labels[j].location - jumptable[i].location - 1;
		program[jumptable[i].location] += relativeaddr & 0x0fff;       //copy the jump address into memory.
	}

	// search for the start of the .data segment
	rewind(fp);
	/* TODO: why not parse .data first? i.e moving .data parsing
	 * before .code parsing  */
	readUntil(".data"); //skip till .data, if no .data, also ok.

	// process the .data segment and generate the variables[] array.
	int dataarea = 0;
	while (fgets(line,sizeof line,fp)!= NULL)
	{
		token = strtok(line,"\n\t\r ");
		if (strcmp(token,".code") == 0)  //go till the .code segment
			break;
		else if (token[strlen(token)-1] == ':')
		{
			token[strlen(token)-1] = '\0';
			variables[noofvariables] =
				{.location=counter+dataarea, .name=strdup(token)};
			token = strtok(NULL,",\n\t\r ");
			if (token == NULL) {
				program[counter + dataarea] = 0;
			} else if (strcmp(token, ".space") == 0) {
				token = strtok(NULL,"\n\t\r ");
				dataarea+=atoi(token);
			}
			else if (strncmp(token, "0x", 2) == 0)
				program[counter+dataarea] = hex2int(token+2) & 0xffff;
			else if (token[0] =='-' || isdigit(token[0]))
				program[counter+dataarea] = atoi(token) & 0xffff;
			noofvariables++;
			dataarea++;
		}
	}

// supply the address fields for the ldi instructions from the variable table
	for( i=0; i<noofldis;i++)
	{
		j = findByName(variables, noofvariables, lditable[i].name);
		if (j < noofvariables)
			program[lditable[i].location] = variables[j].location;
	}

// supply the address fields for the ldi instructions from the label table
	for( i=0; i<noofldis;i++)
	{
		j = findByName(labels, nooflabels, lditable[i].name);
		if (j < nooflabels){
			program[lditable[i].location] = labels[j].location & 0x0fff;
			printf("%d %d %d\n", i, j, (labels[j].location));
		}
	}

//display the resulting tables
	printf("LABEL TABLE\n");
	for (i=0;i<nooflabels;i++)
		printf("%d %s\n", labels[i].location, labels[i].name);
	printf("\n");
	printf("JUMP TABLE\n");
	for (i=0;i<noofjumps;i++)
		printf("%d %s\n", jumptable[i].location, jumptable[i].name);
	printf("\n");
	printf("VARIABLE TABLE\n");
	for (i=0;i<noofvariables;i++)
		printf("%d %s\n", variables[i].location, variables[i].name);
	printf("\n");
	printf("LDI INSTRUCTIONS\n");
	for (i=0;i<noofldis;i++)
		printf("%d %s\n", lditable[i].location, lditable[i].name);
	printf("\n");
	fclose(fp);
	fp = fopen("RAM","w");
	fprintf(fp,"v2.0 raw\n");
	for (i=0;i<counter+dataarea;i++)
		fprintf(fp,"%04x\n",program[i]);

	return 0;
}